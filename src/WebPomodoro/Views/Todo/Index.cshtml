@{
    ViewData["Title"] = "ToDo List";
}

<h2>TODO TODAY</h2>
<p>Activity that I need to do.</p>
<input type="hidden" id="hdnSaveURL" value="@Url.Action("Save", "Todo")" />
<form class="form-inline" data-bind="submit: addTask">
    <div class="form-group">
        <input type="text" data-bind="value: newTaskText" class="form-control" placeholder="Add task...." />
        <button id="btnAddTask" type="submit" class="btn btn-primary">
            <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Add Activity
        </button>
        <br />
    </div>
</form>
<p></p>
<ul id="taskList" class="list-group" data-bind="foreach: tasks, visible:tasks().length > 0">
    <li class="list-group-item tbl-row">
        <div class="row">
            <div class="col-xs-10">
                <div class="row">
                    <div class="col-xs-12">
                        <a href="" data-bind="text: Description, css: {done: IsDone()}, click: $root.editTask"></a>
                    </div>
                    <div class="col-xs-12">
                        <a href="" class="select" data-bind="click: $root.startCountdown">
                            <span class="glyphicon glyphicon-play"></span>
                        </a>
                        <a href="" class="select" data-bind="click: $root.toogleIsDone">
                            <span class="glyphicon glyphicon-check"></span>
                        </a>
                        <a href="" class="select" data-bind="click: $root.deleteTask">
                            <span class="glyphicon glyphicon-trash"></span>
                        </a>
                    </div>
                </div>
            </div>
            <div class="col-xs-2">
                <span class="badge" data-bind="text: strInterrupted"></span>
                <span class="badge" data-bind="text: strCompleted"></span><br />
                <span class="badge" data-bind="text: strAbandoned"></span>
            </div>
        </div>
    </li>
</ul>


<div class="modal fade" id="editdialog" tabindex="-1" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content" data-bind="with: editingTask">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Edit Task</h4>
            </div>
            <div class="modal-body">
                <form id="frmEdit" class="form-horizontal">
                    <div class="form-group">
                        <label for="txtDesc" class="control-label col-md-2">Description</label>
                        <input type="text" class="form-control col-md-8" data-bind="value: Description" />
                    </div>
                    <div class="checkbox col-md-offset-2">
                        <label class="control-label"><input id="checkDone" type="checkbox" data-bind="checked: IsDone" />Is Done</label>
                    </div>
                </form>
                <div class="clearfix"></div>
            </div>
            <div class="modal-footer">
                <button id="btnOk" type="button" class="btn btn-primary" data-bind="click: $root.updateTask">OK</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="mydialog" tabindex="-1" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content" data-bind="with: selectedTask">
            <div class="modal-body">
                <div class="row">
                    <h2 class="text-center">
                        <strong data-bind="text: Description"></strong>
                    </h2>
                </div>
                <div class="row">
                    <div class="col-xs-offset-3 col-xs-6">
                        <div class="text-center">
                            <canvas id="myCanvas" width=200 height=200></canvas>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-offset-3 col-xs-6">
                            <div class="row">
                                <div class="col-xs-6 text-center">
                                    <a id="btnInterrupt" class="btn btn-primary" data-bind="click: $root.inturruptTask">Interruption</a>
                                </div>
                                <div class="col-xm-6 text-center">
                                    <a id="btnAbandon" class="btn btn-danger" data-bind="click: $root.abandonTask">Abandoned</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div id="divInerruptedTask" class="row hidden">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <div class="col-xs-offset-3">
                                    <button type="button" class="close" aria-hidden="true" data-bind="click: $root.closeInturruptTask">&times;</button>
                                </div>
                                <div class="col-xs-offset-3 col-xs-10" data-bind="with: $parent.editingTask">
                                    <form class="form-inline">
                                        <div class="form-group">
                                            <input type="text" data-bind="value: Description" class="form-control" placeholder="Add task...." />
                                            <button id="btnAddTask" type="submit" class="btn btn-primary" data-bind="click: $root.addInterruptedTask">
                                                <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Add Activity
                                            </button>
                                            <div class="checkbox col-xs-offset-1">
                                                <label class="control-label"><input id="checkDone" type="checkbox" data-bind="checked: IsDone" /> Is Done</label>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        var Task = function (data) {
            var self = this;
            self.ID = ko.observable(data.ID);
            self.IsDone = ko.observable(data.IsDone);
            self.Description = ko.observable(data.Description);
            self.Interrupted = ko.observable(data.Interrupted);
            self.Abandoned = ko.observable(data.Abandoned);
            self.Completed = ko.observable(data.Completed);

            self.strInterrupted = ko.computed(function () {
                var strInterrupted = "", i;

                for (i = 0; i < Number(self.Interrupted()) ; i++) {
                    strInterrupted += "' ";
                }

                return strInterrupted;
            });

            self.strCompleted = ko.computed(function () {
                var strCompleted = "", i;

                for (i = 0; i < Number(self.Completed()) ; i++) {
                    strCompleted += "X ";
                }

                return strCompleted;
            });

            self.strAbandoned = ko.computed(function () {
                var strAbandoned = "", i;

                for (i = 0; i < Number(self.Abandoned()) ; i++) {
                    strAbandoned += "- ";
                }

                return strAbandoned;
            });
        }

        ko.utils.extend(Task.prototype, {
            update: function (data) {
                self = this;
                self.IsDone(data.IsDone);
                self.Description(data.Description);
                self.Interrupted(data.Interrupted);
                self.Abandoned(data.Abandoned);
                self.Completed(data.Completed);
            }
        });

        function TaskListViewModel() {
            var self = this;
            self.tasks = ko.observableArray([]);
            self.newTaskText = ko.observable().extend({ required: "Please enter a task" });
            self.selectedTask = ko.observable();
            self.editingTask = ko.observable();
            self.incompleteTasks = ko.computed(function () {
                return ko.utils.arrayFilter(self.tasks(), function (task) { return !task.IsDone() });
            });
            self.countDown;

            // Operations
            self.addTask = function () {
                if (self.newTaskText() !== undefined && self.newTaskText() !== "") {
                    self.tasks.push(new Task({ Description: self.newTaskText() }));
                    self.saveTask(self.tasks()[self.tasks().length - 1]);
                    self.newTaskText("");
                }
            };

            self.editTask = function (item) {
                self.selectedTask(item);
                self.editingTask(new Task(ko.toJS(item)));

                $('#editdialog').modal('show');
            };

            self.updateTask = function (item) {
                if (item.Description !== undefined && item.Description() !== "") {
                    var selected = self.selectedTask(),
                        edited = ko.toJS(self.editingTask);

                    selected.update(edited);

                    self.saveTask(item);

                    self.selectedTask(null);
                    self.editingTask(null);

                    $('#editdialog').modal('hide');
                }
            };

            self.saveTask = function (item, msg) {
                if (item.Description !== undefined && item.Description() !== "") {

                    $.ajax({
                        type: "POST",
                        url: $("#hdnSaveURL").val(),
                        data: {
                            ID: item.ID(),
                            Description: item.Description(),
                            Interrupted: item.Interrupted(),
                            Abandoned: item.Abandoned(),
                            Completed: item.Completed(),
                            IsDone: item.IsDone()
                        },
                        success: function (result) {
                            if (msg !== undefined) {
                                alert(msg);
                            }
                            if (result.id !== undefined && result.id !== "") {
                                item.ID(result.id);
                            }
                        },
                        error: function () { alert("Error"); }
                    });
                }
            };

            self.deleteTask = function (item) {
                if (item.ID !== undefined && item.ID() > 0) {

                    var data = {
                        ID: item.ID(),
                        Description: item.Description(),
                        Interrupted: item.Interrupted(),
                        Abandoned: item.Abandoned(),
                        Completed: item.Completed(),
                        IsDone: item.IsDone()
                    };

                    $.post("Todo/Delete", data,
                        function () {
                            self.tasks.remove(item);
                            alert("Task was deleted.");
                        });
                }
            }

            self.startCountdown = function (item) {
                self.selectedTask(item);

                self.countDown = new CountDown(document.getElementById("myCanvas"), 1, self.countDownDone)
                self.countDown.Start();
                $('#mydialog').modal('show');
            };

            self.countDownDone = function () {
                var task = self.selectedTask();

                task.Completed($.isNumeric(task.Completed()) ? task.Completed() + 1 : 1);
                self.saveTask(task, "Pomodoro is done. Take a break.");
                $('#mydialog').modal('hide');
            };

            self.abandonTask = function (item) {
                if (confirm("Are you sure you want to abandon this pomodoro?")) {
                    self.countDown.Stop();
                    item.Abandoned($.isNumeric(item.Abandoned()) ?  item.Abandoned() + 1 : 1);
                    self.saveTask(item);
                    $('#mydialog').modal('hide');
                }
            }

            self.inturruptTask = function (item) {
                self.editingTask(new Task({
                    Abandoned: 0,
                    Completed: 0,
                    Description: "",
                    ID: 0,
                    Interrupted: 0,
                    IsDone: false,
                }));

                $("#divInerruptedTask").removeClass("hidden");

                item.Interrupted($.isNumeric(item.Interrupted()) ? item.Interrupted() + 1 : 1);
                self.saveTask(item);
            };

            self.addInterruptedTask = function (item) {
                
                self.tasks.push(new Task(ko.toJS(self.editingTask())));
                self.saveTask(self.tasks()[self.tasks().length - 1]);

                self.editingTask("");
                
                $("#divInerruptedTask").addClass("hidden");
            };
            
            self.closeInturruptTask = function () {
                $("#divInerruptedTask").addClass("hidden");
            }

            self.toogleIsDone = function (task) {
                task.IsDone(!task.IsDone());
                self.saveTask(task);
            };

            // Load initial state from server, convert it to Task instances, then populate self.tasks
            $.getJSON("/todo/tasks", function (allData) {
                var mappedTasks = $.map(allData, function (item) { return new Task(item) });
                self.tasks(mappedTasks);
            });
        }

        //http://knockoutjs.com/documentation/extenders.html
        ko.extenders.required = function (target, overrideMessage) {
            //add some sub-observables
            target.hasError = ko.observable();
            target.validationMessage = ko.observable();

            //define a function to do validation
            function validate(newValue) {
                target.hasError(newValue ? false : true);
                target.validationMessage(newValue ? "" : overrideMessage || "This field is required");
            }
            //initialize validation
            validate(target());

            //validate whenever the value changes
            target.subscribe(validate);

            //return the original observable
            return target;
        };

        closeMod = function () {
            $("#divMod").remove();
        }

        $(function () {
            //document is ready.
            ko.applyBindings(new TaskListViewModel());
            $("#taskList").sortable();
        });
    </script>
}