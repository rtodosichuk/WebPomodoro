@model IEnumerable<Activity>

@{
    ViewData["Title"] = "Activity List";
}

<h2>TODO TODAY</h2>
<p>Activity that I need to do today.</p>

<table class="table table-striped table-hover">
    <tr>
        <th>Done</th>
        <th>@Html.DisplayNameFor(model => model.Description)</th>
        <th>@Html.DisplayNameFor(model => model.Place)</th>
        <th>@Html.DisplayNameFor(model => model.ActivityDate)</th>
        <th></th>
    </tr>
    @foreach (var act in Model)
    {
        <tr>
            <td>
                <input type="checkbox" />
            </td>
            <td>
                <a asp-action="StartTimer" asp-route-id="@act.ID" class="starttimer" data-ajax="true" data-toggle="modal" data-target="#dialog">
                    <span class="glyphicon glyphicon-play-circle" aria-hidden="true"></span>
                </a>
                <a asp-action="Edit" asp-route-id="@act.ID" class="edit" data-ajax="true" data-toggle="modal" data-target="#dialog">
                    @Html.DisplayFor(modelItem => act.Description)
                </a>
            </td>
            <td>@Html.DisplayFor(modelItem => act.Place)</td>
            <td>@Html.DisplayFor(modelItem => act.ActivityDate)</td>
            <td class="text-center">
                <a asp-action="Delete" asp-route-id="@act.ID" class="delete" data-ajax="true" data-toggle="modal" data-target="#dialog">
                    <span class="glyphicon glyphicon-minus-sign" aria-hidden="true"></span>
                </a>
            </td>
        </tr>
    }
</table>
<button id="btnAdd" class="btn btn-primary" data-toggle="modal" data-target="#dialog" data-ajax="true">
    <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Add Activity
</button>

<div class="row">&nbsp;</div>

<div class="col-6">
    <table id="tblTasks" class="table table-hover">
        <thead>
            <tr>
                <th>Done</th>
                <th>Task</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: tasks, visible:tasks().length > 0">
            <tr class="tbl-row">
                <td style="width:50px;">
                    <input type="checkbox" data-bind="checked: isDone" />
                </td>
                <td style="min-width:250px;">
                    <a href="" class="select">
                        <span class="glyphicon glyphicon-play"></span>
                    </a>
                    <a href="" data-bind="text: description, css: {done: isDone()}"></a>
                </td>
                <td>
                    <a href="" class="select">
                        <span class="glyphicon glyphicon-trash"></span>
                    </a>
                </td>
            </tr>
        </tbody>
    </table>
</div>
<button id="btnAddTask" class="btn btn-primary" data-toggle="modal" data-target="#dialog-edit" data-ajax="true">
    <span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span> Add Activity
</button>
<div class="row">&nbsp;</div>
<ul class="list-group" data-bind="foreach: tasks, visible:tasks().length > 0">
    <li class="list-group-item">
        <span class="badge"></span>
        <input type="checkbox" data-bind="checked: isDone" />
        <a href="" data-bind="text: description, css: {done: isDone()}"></a>
        <div class="row">
            <a href="" class="">
                <span class="glyphicon glyphicon-play"></span>
            </a>
            <a href="" class="">
                <span class="glyphicon glyphicon-trash"></span>
            </a>
        </div>
    </li>
</ul>


@section scripts{
    <script>
        function refreshTable() {
            //triggers update event to refresh the UserList table data
            table.trigger('update');
        }

        $(".edit").click(function () {
            $.ajax({
                url: $(this).prop("href"),
                type: "GET",
                cache: false,
                success: function (data) {
                    $("#dialog").html(data);
                },
                error: function (xhr, state, thrownError) {
                    $("#dialog").html(JSON.stringify(xhr));
                }
            });
        });

        $(".delete").click(function () {
            $.ajax({
                url: $(this).prop("href"),
                type: "GET",
                cache: false,
                success: function (data) {
                    $("#dialog").html(data);
                },
                error: function (xhr, state, thrownError) {
                    $("#dialog").html(JSON.stringify(xhr));
                }
            });
        });


        $("#btnAdd").click(function () {
            $.ajax({
                url: '@Url.Action("Edit", "Activity", new {id=-1})',
                type: "GET",
                cache: false,
                success: function (data) {
                    $("#dialog").html(data);
                },
                error: function (xhr, state, thrownError) {
                    $("#dialog").html(JSON.stringify(xhr));
                }
            });
        });

        $(".starttimer").click(function () {
            $.ajax({
                url: $(this).prop("href"),
                type: "GET",
                cache: false,
                success: function (data) {
                    $("#dialog").html(data);
                },
                error: function (xhr, state, thrownError) {
                    $("#dialog").html(JSON.stringify(xhr));
                }
            });
        });

        function Task(data) {
            this.isDone = ko.observable(data.isDone);
            this.description = ko.observable(data.description);
        }

        function TaskListViewModel() {
            var self = this;
            self.tasks = ko.observableArray([]);
            self.newTaskText = ko.observable();
            self.incompleteTasks = ko.computed(function () {
                return ko.utils.arrayFilter(self.tasks(), function (task) { return !task.isDone() });
            });

            // Operations
            self.addTask = function () {
                self.tasks.push(new Task({ description: this.newTaskText() }));
                self.newTaskText("");
            };
            self.removeTask = function (task) { self.tasks.remove(task) };

            // Load initial state from server, convert it to Task instances, then populate self.tasks
            $.getJSON("/activity/tasks", function (allData) {
                var mappedTasks = $.map(allData, function (item) { return new Task(item) });
                self.tasks(mappedTasks);
            });
        }

        $(function () {
            //document is ready.
            ko.applyBindings(new TaskListViewModel());
        });
    </script>
}
